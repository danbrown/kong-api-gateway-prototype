version: "3.8"

networks:
  kong-net:
    name: kong-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.1.1.0/24

services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    container_name: kong-database
    image: postgres:11-alpine
    restart: unless-stopped
    networks:
      - kong-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 3s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    container_name: kong-migration
    image: kong:alpine
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    container_name: kong
    image: kong:alpine
    restart: unless-stopped
    networks:
      kong-net:
        ipv4_address: 172.1.1.40
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      # KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DB_UPDATE_FREQUENCY: 1m
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    depends_on:
      - kong-migration
    ports:
      - "8001:8001"
      - "8444:8444"
      - "80:8000"
      - "443:8443"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga
    command: "-c prepare -a postgres -u postgresql://kong:password@kong-database:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    container_name: konga
    image: pantsel/konga
    restart: unless-stopped
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
      # any string will OK for token
      TOKEN_SECRET: iu7YDcPLiZkozQXzZ9kka3Ee1Vid5ZgQ
      NODE_ENV: production
    depends_on:
      - konga-prepare
    ports:
      - "1337:1337"

  #######################################
  # SETTING UP MOCK SERVICES
  #######################################
  mock-alpha:
    container_name: alpha
    restart: unless-stopped
    build:
      context: ./mock-alpha
      dockerfile: ./Dockerfile
    command: yarn run start
    ports:
      - "9001:3000"
    networks:
      kong-net:
        ipv4_address: 172.1.1.11
    volumes:
      - ./mock-alpha:/usr/app

  mock-beta:
    container_name: beta
    restart: unless-stopped
    build:
      context: ./mock-beta
      dockerfile: ./Dockerfile
    command: yarn run start
    ports:
      - "9002:3000"
    networks:
      kong-net:
        ipv4_address: 172.1.1.12
    # volumes:
    #   - ./mock-beta:/usr/app

  mock-gamma:
    container_name: gamma
    restart: unless-stopped
    build:
      context: ./mock-gamma
      dockerfile: ./Dockerfile
    command: yarn run start
    ports:
      - "9003:3000"
    networks:
      kong-net:
        ipv4_address: 172.1.1.13
    # volumes:
    #   - ./mock-gamma:/usr/app

  mock-omega:
    container_name: omega
    restart: unless-stopped
    build:
      context: ./mock-omega
      dockerfile: ./Dockerfile
    command: yarn run start
    ports:
      - "9005:3000"
    networks:
      kong-net:
        ipv4_address: 172.1.1.15
    # volumes:
    #   - ./mock-omega:/usr/app

  #######################################
  # Demo service using node+mongoDB : delta
  #######################################
  mock-delta:
    container_name: delta
    restart: unless-stopped
    build:
      context: ./mock-delta
      dockerfile: ./Dockerfile
    environment:
      MONGODB_URL: mongodb://delta-mongo:27017/docker-node-mongo
      ROUTE_PATH: /delta
    ports:
      - "9004:3000"
    external_links:
      - delta-mongo
    networks:
      kong-net:
        ipv4_address: 172.1.1.14
    volumes:
      - ./mock-delta:/usr/app

  mongo:
    container_name: delta-mongo
    restart: unless-stopped
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - kong-net

  #######################################
  # DEMO: Frontend services
  #######################################
  react-app:
    container_name: react-app
    restart: unless-stopped
    stdin_open: true
    build:
      context: ./react-app
      dockerfile: ./Dockerfile
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: "npm run serve"
    ports:
      - "3001:5000"
    networks:
      - kong-net
